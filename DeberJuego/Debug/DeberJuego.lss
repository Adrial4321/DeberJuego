
DeberJuego.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000054e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af9  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000712  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000542  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000556  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 8000000
#include <util/delay.h>
#include <time.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c8 55       	subi	r28, 0x58	; 88
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	int dire;
	DDRB = 0B11111111;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 b9       	out	0x04, r24	; 4
	DDRD = 0B11111111;
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0B00000111;
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	87 b9       	out	0x07, r24	; 7
	char PORT[8] =  {1,2,4,8,16,32,64,128};
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	e4 e0       	ldi	r30, 0x04	; 4
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2a>
	char ladoD[]={0x00,0x00,0x00,0x00,0x7E,0x7E,0x7E,0x00};
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	ec e0       	ldi	r30, 0x0C	; 12
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	de 01       	movw	r26, r28
  d0:	19 96       	adiw	r26, 0x09	; 9
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	8a 95       	dec	r24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
	char limpiar[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};	
  da:	fe 01       	movw	r30, r28
  dc:	71 96       	adiw	r30, 0x11	; 17
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	df 01       	movw	r26, r30
  e2:	1d 92       	st	X+, r1
  e4:	8a 95       	dec	r24
  e6:	e9 f7       	brne	.-6      	; 0xe2 <main+0x4c>
	char ladoI[]={0x00,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00};
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	e4 e1       	ldi	r30, 0x14	; 20
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	59 96       	adiw	r26, 0x19	; 25
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	8a 95       	dec	r24
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x5c>
	char win[]={0x00,0x1C,0x20,0x10,0x10,0x20,0x1C,0x00,
  fa:	88 e1       	ldi	r24, 0x18	; 24
  fc:	ec e1       	ldi	r30, 0x1C	; 28
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	de 01       	movw	r26, r28
 102:	91 96       	adiw	r26, 0x21	; 33
 104:	01 90       	ld	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	8a 95       	dec	r24
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x6e>
		0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,
	0x00,0x3C,0x08,0x04,0x04,0x38,0x00,0x00};
	char lose[]={0x00,0x7E,0x40,0x40,0x40,0x40,0x40,0x00,
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	e4 e3       	ldi	r30, 0x34	; 52
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	de 01       	movw	r26, r28
 114:	d9 96       	adiw	r26, 0x39	; 57
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	8a 95       	dec	r24
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x80>
	while (1)
	{
	int contador=0;
	int marcador=0;
	int estadoBoton1=0;
	int estadoBoton2=0;
 11e:	e1 2c       	mov	r14, r1
 120:	f1 2c       	mov	r15, r1
	0x00,0x7E,0x4A,0x4A,0x4A,0x42,0x00,0x00};
	while (1)
	{
	int contador=0;
	int marcador=0;
	int estadoBoton1=0;
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	10 e0       	ldi	r17, 0x00	; 0
	0x00,0x46,0x49,0x49,0x49,0x31,0x00,0x00,
	0x00,0x7E,0x4A,0x4A,0x4A,0x42,0x00,0x00};
	while (1)
	{
	int contador=0;
	int marcador=0;
 126:	c1 2c       	mov	r12, r1
 128:	d1 2c       	mov	r13, r1
	0x00,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00,
	0x00,0x46,0x49,0x49,0x49,0x31,0x00,0x00,
	0x00,0x7E,0x4A,0x4A,0x4A,0x42,0x00,0x00};
	while (1)
	{
	int contador=0;
 12a:	a1 2c       	mov	r10, r1
 12c:	b1 2c       	mov	r11, r1
	int marcador=0;
	int estadoBoton1=0;
	int estadoBoton2=0;
	while(contador<10){
 12e:	98 c0       	rjmp	.+304    	; 0x260 <main+0x1ca>
		PORTC=1<<PORTC2;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	88 b9       	out	0x08, r24	; 8
		dire=rand() % (2);;
 134:	0e 94 32 02 	call	0x464	; 0x464 <rand>
 138:	81 70       	andi	r24, 0x01	; 1
 13a:	90 78       	andi	r25, 0x80	; 128
 13c:	99 23       	and	r25, r25
 13e:	24 f4       	brge	.+8      	; 0x148 <main+0xb2>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	8e 6f       	ori	r24, 0xFE	; 254
 144:	9f 6f       	ori	r25, 0xFF	; 255
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	bc 01       	movw	r22, r24
		if(dire==0){
 14a:	89 2b       	or	r24, r25
 14c:	89 f1       	breq	.+98     	; 0x1b0 <main+0x11a>
 14e:	41 c0       	rjmp	.+130    	; 0x1d2 <main+0x13c>
			for(int k=0; k<250; k++)
			{
				for (int j=0; j<8;j++)//
				{
					PORTD = PORT[j];
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	e2 0f       	add	r30, r18
 15a:	f3 1f       	adc	r31, r19
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
					PORTB = ~ladoD[j];
 160:	e9 e0       	ldi	r30, 0x09	; 9
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ec 0f       	add	r30, r28
 166:	fd 1f       	adc	r31, r29
 168:	e2 0f       	add	r30, r18
 16a:	f3 1f       	adc	r31, r19
 16c:	90 81       	ld	r25, Z
 16e:	90 95       	com	r25
 170:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	e7 ec       	ldi	r30, 0xC7	; 199
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xe0>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xe6>
 17c:	00 00       	nop
		PORTC=1<<PORTC2;
		dire=rand() % (2);;
		if(dire==0){
			for(int k=0; k<250; k++)
			{
				for (int j=0; j<8;j++)//
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0xf2>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	28 30       	cpi	r18, 0x08	; 8
 18a:	31 05       	cpc	r19, r1
 18c:	0c f3       	brlt	.-62     	; 0x150 <main+0xba>
				{
					PORTD = PORT[j];
					PORTB = ~ladoD[j];
					_delay_ms(0.10);
				}
				if((PINC & (1<<PORTC0))){
 18e:	30 9b       	sbis	0x06, 0	; 6
 190:	02 c0       	rjmp	.+4      	; 0x196 <main+0x100>
					estadoBoton1=1;
 192:	01 e0       	ldi	r16, 0x01	; 1
 194:	10 e0       	ldi	r17, 0x00	; 0
				}
				if((!(PINC&(1<<PORTC0))) && estadoBoton1==1){
 196:	30 99       	sbic	0x06, 0	; 6
 198:	08 c0       	rjmp	.+16     	; 0x1aa <main+0x114>
 19a:	01 30       	cpi	r16, 0x01	; 1
 19c:	11 05       	cpc	r17, r1
 19e:	29 f4       	brne	.+10     	; 0x1aa <main+0x114>
					estadoBoton1=0;
					marcador++;
 1a0:	ff ef       	ldi	r31, 0xFF	; 255
 1a2:	cf 1a       	sub	r12, r31
 1a4:	df 0a       	sbc	r13, r31
				}
				if((PINC & (1<<PORTC0))){
					estadoBoton1=1;
				}
				if((!(PINC&(1<<PORTC0))) && estadoBoton1==1){
					estadoBoton1=0;
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
	int estadoBoton2=0;
	while(contador<10){
		PORTC=1<<PORTC2;
		dire=rand() % (2);;
		if(dire==0){
			for(int k=0; k<250; k++)
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x11e>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	4a 3f       	cpi	r20, 0xFA	; 250
 1b6:	51 05       	cpc	r21, r1
 1b8:	2c f3       	brlt	.-54     	; 0x184 <main+0xee>
				if((!(PINC&(1<<PORTC0))) && estadoBoton1==1){
					estadoBoton1=0;
					marcador++;
				}
			}
			contador++;
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	a2 1a       	sub	r10, r18
 1be:	b2 0a       	sbc	r11, r18
 1c0:	3f e7       	ldi	r19, 0x7F	; 127
 1c2:	89 ea       	ldi	r24, 0xA9	; 169
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	31 50       	subi	r19, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x130>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x13a>
 1d0:	00 00       	nop
			_delay_ms(150);
		}
		if(dire==1){
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	71 05       	cpc	r23, r1
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0x144>
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <main+0x1ca>
 1da:	31 c0       	rjmp	.+98     	; 0x23e <main+0x1a8>
			for(int k=0; k<200; k++)
			{
				for (int j=0; j<8;j++)
				{
					PORTD = PORT[j];
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	e8 0f       	add	r30, r24
 1e6:	f9 1f       	adc	r31, r25
 1e8:	20 81       	ld	r18, Z
 1ea:	2b b9       	out	0x0b, r18	; 11
					PORTB = ~ladoI[j];
 1ec:	e9 e1       	ldi	r30, 0x19	; 25
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e8 0f       	add	r30, r24
 1f6:	f9 1f       	adc	r31, r25
 1f8:	20 81       	ld	r18, Z
 1fa:	20 95       	com	r18
 1fc:	25 b9       	out	0x05, r18	; 5
 1fe:	a7 ec       	ldi	r26, 0xC7	; 199
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	11 97       	sbiw	r26, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x16c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x172>
 208:	00 00       	nop
			_delay_ms(150);
		}
		if(dire==1){
			for(int k=0; k<200; k++)
			{
				for (int j=0; j<8;j++)
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	02 c0       	rjmp	.+4      	; 0x212 <main+0x17c>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	91 05       	cpc	r25, r1
 216:	14 f3       	brlt	.-60     	; 0x1dc <main+0x146>
				{
					PORTD = PORT[j];
					PORTB = ~ladoI[j];
					_delay_ms(0.10);
				}
				if((PINC & (1<<PORTC1))){
 218:	31 9b       	sbis	0x06, 1	; 6
 21a:	03 c0       	rjmp	.+6      	; 0x222 <main+0x18c>
					estadoBoton2=1;
 21c:	ee 24       	eor	r14, r14
 21e:	e3 94       	inc	r14
 220:	f1 2c       	mov	r15, r1
				}
				if((!(PINC&(1<<PORTC1))) && estadoBoton2==1){
 222:	31 99       	sbic	0x06, 1	; 6
 224:	09 c0       	rjmp	.+18     	; 0x238 <main+0x1a2>
 226:	b1 e0       	ldi	r27, 0x01	; 1
 228:	eb 16       	cp	r14, r27
 22a:	f1 04       	cpc	r15, r1
 22c:	29 f4       	brne	.+10     	; 0x238 <main+0x1a2>
					estadoBoton2=0;
					marcador++;
 22e:	ef ef       	ldi	r30, 0xFF	; 255
 230:	ce 1a       	sub	r12, r30
 232:	de 0a       	sbc	r13, r30
				}
				if((PINC & (1<<PORTC1))){
					estadoBoton2=1;
				}
				if((!(PINC&(1<<PORTC1))) && estadoBoton2==1){
					estadoBoton2=0;
 234:	e1 2c       	mov	r14, r1
 236:	f1 2c       	mov	r15, r1
			}
			contador++;
			_delay_ms(150);
		}
		if(dire==1){
			for(int k=0; k<200; k++)
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	02 c0       	rjmp	.+4      	; 0x242 <main+0x1ac>
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	48 3c       	cpi	r20, 0xC8	; 200
 244:	51 05       	cpc	r21, r1
 246:	1c f3       	brlt	.-58     	; 0x20e <main+0x178>
					estadoBoton2=0;
					marcador++;
				}
				
			}
			contador++;
 248:	ff ef       	ldi	r31, 0xFF	; 255
 24a:	af 1a       	sub	r10, r31
 24c:	bf 0a       	sbc	r11, r31
 24e:	2f e7       	ldi	r18, 0x7F	; 127
 250:	39 ea       	ldi	r19, 0xA9	; 169
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	21 50       	subi	r18, 0x01	; 1
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1be>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1c8>
 25e:	00 00       	nop
	{
	int contador=0;
	int marcador=0;
	int estadoBoton1=0;
	int estadoBoton2=0;
	while(contador<10){
 260:	9a e0       	ldi	r25, 0x0A	; 10
 262:	a9 16       	cp	r10, r25
 264:	b1 04       	cpc	r11, r1
 266:	0c f4       	brge	.+2      	; 0x26a <main+0x1d4>
 268:	63 cf       	rjmp	.-314    	; 0x130 <main+0x9a>
			contador++;
			_delay_ms(150);
		}
	}
	
	PORTC=0x0;
 26a:	18 b8       	out	0x08, r1	; 8
 26c:	af e1       	ldi	r26, 0x1F	; 31
 26e:	be e4       	ldi	r27, 0x4E	; 78
 270:	11 97       	sbiw	r26, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x1da>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x1e0>
 276:	00 00       	nop
	_delay_ms(10);
	if (marcador>=7){
 278:	b7 e0       	ldi	r27, 0x07	; 7
 27a:	cb 16       	cp	r12, r27
 27c:	d1 04       	cpc	r13, r1
 27e:	a4 f1       	brlt	.+104    	; 0x2e8 <main+0x252>
		PORTC=0x0;
 280:	18 b8       	out	0x08, r1	; 8
		PORTC=1<<PORTC3;
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	88 b9       	out	0x08, r24	; 8
		for (int i=0;i<16;i++){
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	2b c0       	rjmp	.+86     	; 0x2e2 <main+0x24c>
			for(int k=0; k<30; k++)
			{
				for (int j=0; j<8;j++)
				{
					PORTD = PORT[j];
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	e8 0f       	add	r30, r24
 296:	f9 1f       	adc	r31, r25
 298:	20 81       	ld	r18, Z
 29a:	2b b9       	out	0x0b, r18	; 11
					PORTB = ~win[i+j];
 29c:	fa 01       	movw	r30, r20
 29e:	e8 0f       	add	r30, r24
 2a0:	f9 1f       	adc	r31, r25
 2a2:	21 e2       	ldi	r18, 0x21	; 33
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	2c 0f       	add	r18, r28
 2a8:	3d 1f       	adc	r19, r29
 2aa:	e2 0f       	add	r30, r18
 2ac:	f3 1f       	adc	r31, r19
 2ae:	20 81       	ld	r18, Z
 2b0:	20 95       	com	r18
 2b2:	25 b9       	out	0x05, r18	; 5
 2b4:	a7 ec       	ldi	r26, 0xC7	; 199
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	11 97       	sbiw	r26, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x222>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x228>
 2be:	00 00       	nop
		PORTC=0x0;
		PORTC=1<<PORTC3;
		for (int i=0;i<16;i++){
			for(int k=0; k<30; k++)
			{
				for (int j=0; j<8;j++)
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <main+0x232>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	91 05       	cpc	r25, r1
 2cc:	fc f2       	brlt	.-66     	; 0x28c <main+0x1f6>
	_delay_ms(10);
	if (marcador>=7){
		PORTC=0x0;
		PORTC=1<<PORTC3;
		for (int i=0;i<16;i++){
			for(int k=0; k<30; k++)
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x242>
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	6e 31       	cpi	r22, 0x1E	; 30
 2da:	71 05       	cpc	r23, r1
 2dc:	9c f3       	brlt	.-26     	; 0x2c4 <main+0x22e>
	PORTC=0x0;
	_delay_ms(10);
	if (marcador>=7){
		PORTC=0x0;
		PORTC=1<<PORTC3;
		for (int i=0;i<16;i++){
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	40 31       	cpi	r20, 0x10	; 16
 2e4:	51 05       	cpc	r21, r1
 2e6:	b4 f3       	brlt	.-20     	; 0x2d4 <main+0x23e>
			}
			
		}

	}
	if(marcador<7){
 2e8:	b7 e0       	ldi	r27, 0x07	; 7
 2ea:	cb 16       	cp	r12, r27
 2ec:	d1 04       	cpc	r13, r1
 2ee:	ec f5       	brge	.+122    	; 0x36a <main+0x2d4>
 2f0:	ef e7       	ldi	r30, 0x7F	; 127
 2f2:	f8 e3       	ldi	r31, 0x38	; 56
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	e1 50       	subi	r30, 0x01	; 1
 2f8:	f0 40       	sbci	r31, 0x00	; 0
 2fa:	20 40       	sbci	r18, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x260>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x26a>
 300:	00 00       	nop
		_delay_ms(50);
		PORTC=0x0;
 302:	18 b8       	out	0x08, r1	; 8
		PORTC=1<<PORTC4;
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	88 b9       	out	0x08, r24	; 8
		for (int i=0;i<24;i++){
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	2b c0       	rjmp	.+86     	; 0x364 <main+0x2ce>
			for(int k=0; k<30; k++)
			{
				for (int j=0; j<8;j++)
				{
					PORTD = PORT[j];
 30e:	e1 e0       	ldi	r30, 0x01	; 1
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ec 0f       	add	r30, r28
 314:	fd 1f       	adc	r31, r29
 316:	e8 0f       	add	r30, r24
 318:	f9 1f       	adc	r31, r25
 31a:	20 81       	ld	r18, Z
 31c:	2b b9       	out	0x0b, r18	; 11
					PORTB = ~lose[i+j];
 31e:	fa 01       	movw	r30, r20
 320:	e8 0f       	add	r30, r24
 322:	f9 1f       	adc	r31, r25
 324:	a9 e3       	ldi	r26, 0x39	; 57
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	ac 0f       	add	r26, r28
 32a:	bd 1f       	adc	r27, r29
 32c:	ea 0f       	add	r30, r26
 32e:	fb 1f       	adc	r31, r27
 330:	20 81       	ld	r18, Z
 332:	20 95       	com	r18
 334:	25 b9       	out	0x05, r18	; 5
 336:	e7 ec       	ldi	r30, 0xC7	; 199
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x2a4>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x2aa>
 340:	00 00       	nop
		PORTC=0x0;
		PORTC=1<<PORTC4;
		for (int i=0;i<24;i++){
			for(int k=0; k<30; k++)
			{
				for (int j=0; j<8;j++)
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	02 c0       	rjmp	.+4      	; 0x34a <main+0x2b4>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	88 30       	cpi	r24, 0x08	; 8
 34c:	91 05       	cpc	r25, r1
 34e:	fc f2       	brlt	.-66     	; 0x30e <main+0x278>
	if(marcador<7){
		_delay_ms(50);
		PORTC=0x0;
		PORTC=1<<PORTC4;
		for (int i=0;i<24;i++){
			for(int k=0; k<30; k++)
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	02 c0       	rjmp	.+4      	; 0x35a <main+0x2c4>
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	6e 31       	cpi	r22, 0x1E	; 30
 35c:	71 05       	cpc	r23, r1
 35e:	9c f3       	brlt	.-26     	; 0x346 <main+0x2b0>
	}
	if(marcador<7){
		_delay_ms(50);
		PORTC=0x0;
		PORTC=1<<PORTC4;
		for (int i=0;i<24;i++){
 360:	4f 5f       	subi	r20, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	48 31       	cpi	r20, 0x18	; 24
 366:	51 05       	cpc	r21, r1
 368:	b4 f3       	brlt	.-20     	; 0x356 <main+0x2c0>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	20 c0       	rjmp	.+64     	; 0x3b0 <main+0x31a>
	}
	for(int k=0; k<100; k++)
	{
		for (int j=0; j<8;j++)//
		{
			PORTD = PORT[j];
 370:	e1 e0       	ldi	r30, 0x01	; 1
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ec 0f       	add	r30, r28
 376:	fd 1f       	adc	r31, r29
 378:	e8 0f       	add	r30, r24
 37a:	f9 1f       	adc	r31, r25
 37c:	20 81       	ld	r18, Z
 37e:	2b b9       	out	0x0b, r18	; 11
			PORTB = ~limpiar[j];
 380:	e1 e1       	ldi	r30, 0x11	; 17
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e8 0f       	add	r30, r24
 38a:	f9 1f       	adc	r31, r25
 38c:	20 81       	ld	r18, Z
 38e:	20 95       	com	r18
 390:	25 b9       	out	0x05, r18	; 5
 392:	a7 ec       	ldi	r26, 0xC7	; 199
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	11 97       	sbiw	r26, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x300>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x306>
 39c:	00 00       	nop
		}
	
	}
	for(int k=0; k<100; k++)
	{
		for (int j=0; j<8;j++)//
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <main+0x310>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	88 30       	cpi	r24, 0x08	; 8
 3a8:	91 05       	cpc	r25, r1
 3aa:	14 f3       	brlt	.-60     	; 0x370 <main+0x2da>
			}
			
		}
	
	}
	for(int k=0; k<100; k++)
 3ac:	4f 5f       	subi	r20, 0xFF	; 255
 3ae:	5f 4f       	sbci	r21, 0xFF	; 255
 3b0:	44 36       	cpi	r20, 0x64	; 100
 3b2:	51 05       	cpc	r21, r1
 3b4:	b4 f3       	brlt	.-20     	; 0x3a2 <main+0x30c>
			PORTD = PORT[j];
			PORTB = ~limpiar[j];
			_delay_ms(0.10);
		}
	}
	PORTC=0x0;
 3b6:	18 b8       	out	0x08, r1	; 8
 3b8:	bf ef       	ldi	r27, 0xFF	; 255
 3ba:	e0 e7       	ldi	r30, 0x70	; 112
 3bc:	f2 e0       	ldi	r31, 0x02	; 2
 3be:	b1 50       	subi	r27, 0x01	; 1
 3c0:	e0 40       	sbci	r30, 0x00	; 0
 3c2:	f0 40       	sbci	r31, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x328>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x332>
 3c8:	00 00       	nop
 3ca:	a9 ce       	rjmp	.-686    	; 0x11e <main+0x88>

000003cc <do_rand>:
 3cc:	8f 92       	push	r8
 3ce:	9f 92       	push	r9
 3d0:	af 92       	push	r10
 3d2:	bf 92       	push	r11
 3d4:	cf 92       	push	r12
 3d6:	df 92       	push	r13
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	68 81       	ld	r22, Y
 3e4:	79 81       	ldd	r23, Y+1	; 0x01
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ea:	61 15       	cp	r22, r1
 3ec:	71 05       	cpc	r23, r1
 3ee:	81 05       	cpc	r24, r1
 3f0:	91 05       	cpc	r25, r1
 3f2:	21 f4       	brne	.+8      	; 0x3fc <do_rand+0x30>
 3f4:	64 e2       	ldi	r22, 0x24	; 36
 3f6:	79 ed       	ldi	r23, 0xD9	; 217
 3f8:	8b e5       	ldi	r24, 0x5B	; 91
 3fa:	97 e0       	ldi	r25, 0x07	; 7
 3fc:	2d e1       	ldi	r18, 0x1D	; 29
 3fe:	33 ef       	ldi	r19, 0xF3	; 243
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	0e 94 42 02 	call	0x484	; 0x484 <__divmodsi4>
 408:	49 01       	movw	r8, r18
 40a:	5a 01       	movw	r10, r20
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	a7 ea       	ldi	r26, 0xA7	; 167
 412:	b1 e4       	ldi	r27, 0x41	; 65
 414:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__muluhisi3>
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
 41c:	ac ee       	ldi	r26, 0xEC	; 236
 41e:	b4 ef       	ldi	r27, 0xF4	; 244
 420:	a5 01       	movw	r20, r10
 422:	94 01       	movw	r18, r8
 424:	0e 94 6f 02 	call	0x4de	; 0x4de <__mulohisi3>
 428:	dc 01       	movw	r26, r24
 42a:	cb 01       	movw	r24, r22
 42c:	8c 0d       	add	r24, r12
 42e:	9d 1d       	adc	r25, r13
 430:	ae 1d       	adc	r26, r14
 432:	bf 1d       	adc	r27, r15
 434:	b7 ff       	sbrs	r27, 7
 436:	03 c0       	rjmp	.+6      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	a1 09       	sbc	r26, r1
 43c:	b0 48       	sbci	r27, 0x80	; 128
 43e:	88 83       	st	Y, r24
 440:	99 83       	std	Y+1, r25	; 0x01
 442:	aa 83       	std	Y+2, r26	; 0x02
 444:	bb 83       	std	Y+3, r27	; 0x03
 446:	9f 77       	andi	r25, 0x7F	; 127
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	df 90       	pop	r13
 452:	cf 90       	pop	r12
 454:	bf 90       	pop	r11
 456:	af 90       	pop	r10
 458:	9f 90       	pop	r9
 45a:	8f 90       	pop	r8
 45c:	08 95       	ret

0000045e <rand_r>:
 45e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <do_rand>
 462:	08 95       	ret

00000464 <rand>:
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 e6 01 	call	0x3cc	; 0x3cc <do_rand>
 46c:	08 95       	ret

0000046e <srand>:
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 476:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 47a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 47e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 482:	08 95       	ret

00000484 <__divmodsi4>:
 484:	05 2e       	mov	r0, r21
 486:	97 fb       	bst	r25, 7
 488:	1e f4       	brtc	.+6      	; 0x490 <__divmodsi4+0xc>
 48a:	00 94       	com	r0
 48c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__negsi2>
 490:	57 fd       	sbrc	r21, 7
 492:	07 d0       	rcall	.+14     	; 0x4a2 <__divmodsi4_neg2>
 494:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__udivmodsi4>
 498:	07 fc       	sbrc	r0, 7
 49a:	03 d0       	rcall	.+6      	; 0x4a2 <__divmodsi4_neg2>
 49c:	4e f4       	brtc	.+18     	; 0x4b0 <__divmodsi4_exit>
 49e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__negsi2>

000004a2 <__divmodsi4_neg2>:
 4a2:	50 95       	com	r21
 4a4:	40 95       	com	r20
 4a6:	30 95       	com	r19
 4a8:	21 95       	neg	r18
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	4f 4f       	sbci	r20, 0xFF	; 255
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255

000004b0 <__divmodsi4_exit>:
 4b0:	08 95       	ret

000004b2 <__negsi2>:
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__muluhisi3>:
 4c2:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 4c6:	a5 9f       	mul	r26, r21
 4c8:	90 0d       	add	r25, r0
 4ca:	b4 9f       	mul	r27, r20
 4cc:	90 0d       	add	r25, r0
 4ce:	a4 9f       	mul	r26, r20
 4d0:	80 0d       	add	r24, r0
 4d2:	91 1d       	adc	r25, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	08 95       	ret

000004d8 <__mulshisi3>:
 4d8:	b7 ff       	sbrs	r27, 7
 4da:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__muluhisi3>

000004de <__mulohisi3>:
 4de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__muluhisi3>
 4e2:	82 1b       	sub	r24, r18
 4e4:	93 0b       	sbc	r25, r19
 4e6:	08 95       	ret

000004e8 <__udivmodsi4>:
 4e8:	a1 e2       	ldi	r26, 0x21	; 33
 4ea:	1a 2e       	mov	r1, r26
 4ec:	aa 1b       	sub	r26, r26
 4ee:	bb 1b       	sub	r27, r27
 4f0:	fd 01       	movw	r30, r26
 4f2:	0d c0       	rjmp	.+26     	; 0x50e <__udivmodsi4_ep>

000004f4 <__udivmodsi4_loop>:
 4f4:	aa 1f       	adc	r26, r26
 4f6:	bb 1f       	adc	r27, r27
 4f8:	ee 1f       	adc	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	a2 17       	cp	r26, r18
 4fe:	b3 07       	cpc	r27, r19
 500:	e4 07       	cpc	r30, r20
 502:	f5 07       	cpc	r31, r21
 504:	20 f0       	brcs	.+8      	; 0x50e <__udivmodsi4_ep>
 506:	a2 1b       	sub	r26, r18
 508:	b3 0b       	sbc	r27, r19
 50a:	e4 0b       	sbc	r30, r20
 50c:	f5 0b       	sbc	r31, r21

0000050e <__udivmodsi4_ep>:
 50e:	66 1f       	adc	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	1a 94       	dec	r1
 518:	69 f7       	brne	.-38     	; 0x4f4 <__udivmodsi4_loop>
 51a:	60 95       	com	r22
 51c:	70 95       	com	r23
 51e:	80 95       	com	r24
 520:	90 95       	com	r25
 522:	9b 01       	movw	r18, r22
 524:	ac 01       	movw	r20, r24
 526:	bd 01       	movw	r22, r26
 528:	cf 01       	movw	r24, r30
 52a:	08 95       	ret

0000052c <__umulhisi3>:
 52c:	a2 9f       	mul	r26, r18
 52e:	b0 01       	movw	r22, r0
 530:	b3 9f       	mul	r27, r19
 532:	c0 01       	movw	r24, r0
 534:	a3 9f       	mul	r26, r19
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	b2 9f       	mul	r27, r18
 540:	70 0d       	add	r23, r0
 542:	81 1d       	adc	r24, r1
 544:	11 24       	eor	r1, r1
 546:	91 1d       	adc	r25, r1
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
